"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||("get"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k]});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:true,value:v})}:function(o,v){o["default"]=v});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(k!=="default"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result};var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:true});const moment_1=__importDefault(require("moment"));const fs=__importStar(require("fs"));const path=__importStar(require("path"));const colors_1=require("./constants/colors");class NodeLogger{constructor(options){this.logRotationInterval=24*60*60*1e3;this.MAPPED_LABEL={error:"RED",warning:"YELLOW",info:"CYAN",success:"GREEN",log:"WHITE",notify:"BLUE",alert:"YELLOWBG",critical:"REDBG"};this.logger=this.createMappedLoggerFunction();this.options=options||{};this.checkOptions(this.options)}checkOptions(options){if(options.saveLogFile){if(this.isItBrowser()&&!this.isItNode()){console.log("%c Log File Save Option is not available for browser.","background:red;")}else{this.setLogDirectoryAndFile(options);if(!fs.existsSync(this.logDirectory)){fs.mkdirSync(this.logDirectory,{recursive:true})}this.createLogStream(options)}}if(options.customLabels&&options.customLabels.length){this.updateCustomLabels(options.customLabels);this.createMappedLoggerFunction()}}setLogDirectoryAndFile(options){this.logDirectory=options.logFolderPath?path.resolve(process.cwd(),options.logFolderPath):path.join(process.cwd(),"logs");const filename=options.logFileName||(0,moment_1.default)().format("DD-MM-YYYY")+".log";this.logFile=path.join(this.logDirectory,filename)}updateCustomLabels(customLabels){customLabels.forEach(label=>{if(!label.label||!label.color)return;this.MAPPED_LABEL[label.label]=label.color})}createMappedLoggerFunction(){Object.keys(this.MAPPED_LABEL).forEach(key=>{if(!this.logger)this.logger={};this.logger[key]=message=>this.log(key,message)});return Object.assign(this.logger)}getCallerName(){var _a,_b;const error=new Error;const stackLines=((_a=error.stack)===null||_a===void 0?void 0:_a.split("\n"))||[];const callerLine=(_b=stackLines[5])===null||_b===void 0?void 0:_b.trim();if(!callerLine)return"Unknown";const matches=callerLine.match(/at\s+(.*?)\s+\(/);return matches&&matches.length>=2?callerLine:"Unknown"}log(label,message){const formattedMessage=this.formatMessage(label,message);const mappedLabelColor=this.MAPPED_LABEL[label];if(this.isItBrowser()&&!this.isItNode()){this.logToBrowser(formattedMessage,mappedLabelColor,message)}else if(!this.isItBrowser()&&this.isItNode()){this.logToNode(formattedMessage,mappedLabelColor,message);this.options.saveLogFile&&this.saveToFile(formattedMessage,message)}else{console.log(formattedMessage,message);this.options.saveLogFile&&this.saveToFile(formattedMessage,message)}}formatMessage(label,message){let formattedMessage="";if(this.options.printTimestamp)formattedMessage+=`[${(0,moment_1.default)().format()}] `;if(this.options.printLabelName)formattedMessage+=`[${label.toUpperCase()}] `;if(this.options.printCallerFunctionLocation)formattedMessage+=`[Function ${this.getCallerName()}] `;if(this.options.printTimestamp||this.options.printCallerFunctionLocation||this.options.printLabelName){formattedMessage+=": "}return formattedMessage}logToBrowser(formattedMessage,mappedLabelColor,message){const decidedColor=this.getColorStringForBrowser(mappedLabelColor);console.log(`%c ${formattedMessage} ${message}`,decidedColor)}logToNode(formattedMessage,mappedLabelColor,message){const decidedColor=this.getColorStringForNode(mappedLabelColor);console.log(decidedColor,formattedMessage,message,colors_1.Color.RESET)}saveToFile(formattedMessage,message){const stringifiedMessage=typeof message==="object"?JSON.stringify(message):message;this.logStream.write(`${formattedMessage} ${stringifiedMessage}\n`)}createLogStream(options){this.logStream=fs.createWriteStream(this.logFile,{flags:"a"});setInterval(()=>{if(this.logStream.bytesWritten>(options.logRotationInterval||this.logRotationInterval)){this.rotateLogFile()}},options.logRotationInterval||this.logRotationInterval)}createLogFile(){return fs.createWriteStream(this.logFile,{flags:"a"})}rotateLogFile(){this.logStream.end();fs.unlink(this.logFile,err=>{if(err){console.error(colors_1.Color.RED,"Error deleting log file:",err)}else{this.logStream=this.createLogFile();console.log(colors_1.Color.GREEN,"Log file rotated successfully.")}})}getColorStringForBrowser(mappedLabelColor){if(typeof mappedLabelColor==="object"&&"ansiCode"in mappedLabelColor){const ansiToRgbResult=this.ansiEscapeToRgb(mappedLabelColor.ansiCode);return`${ansiToRgbResult.isBackground?"background":"color"}: rgb(${ansiToRgbResult.color.R}, ${ansiToRgbResult.color.G}, ${ansiToRgbResult.color.B});`}else if(typeof mappedLabelColor==="object"){return`${mappedLabelColor.isBackground?"background":"color"}: rgb(${mappedLabelColor.R}, ${mappedLabelColor.G}, ${mappedLabelColor.B});`}else{const ansiToRgbResult=this.ansiEscapeToRgb(colors_1.Color[mappedLabelColor]);return`${ansiToRgbResult.isBackground?"background":"color"}: rgb(${ansiToRgbResult.color.R}, ${ansiToRgbResult.color.G}, ${ansiToRgbResult.color.B});`}}getColorStringForNode(mappedLabelColor){if(typeof mappedLabelColor==="object"&&"ansiCode"in mappedLabelColor){return`${mappedLabelColor.ansiCode}`}else if(typeof mappedLabelColor==="object"){const rgbToAnsi=this.rgbToAnsi(mappedLabelColor);return`${mappedLabelColor.isBackground?"[48;5;"+rgbToAnsi+"m":"[38;5;"+rgbToAnsi+"m"}`}else{return`${colors_1.Color[mappedLabelColor]}`}}ansiToRgb(code){if(code<16){const baseColors=[{R:0,G:0,B:0},{R:128,G:0,B:0},{R:0,G:128,B:0},{R:128,G:128,B:0},{R:0,G:0,B:128},{R:128,G:0,B:128},{R:0,G:128,B:128},{R:192,G:192,B:192},{R:128,G:128,B:128},{R:255,G:0,B:0},{R:0,G:255,B:0},{R:255,G:255,B:0},{R:0,G:0,B:255},{R:255,G:0,B:255},{R:0,G:255,B:255},{R:255,G:255,B:255}];return baseColors[code]}else if(code<232){code-=16;const r=Math.floor(code/36)*51;const g=Math.floor(code%36/6)*51;const b=code%6*51;return{R:r,G:g,B:b}}else if(code<256){const gray=Math.round((code-232)*10+8);return{R:gray,G:gray,B:gray}}else{throw new Error("Invalid ANSI color code")}}rgbToAnsi(color){const ansiColors=[];for(let i=0;i<256;i++){ansiColors.push(this.ansiToRgb(i))}let closestIndex=0;let smallestDistance=Number.MAX_VALUE;for(let i=0;i<ansiColors.length;i++){const ansiColor=ansiColors[i];const distance=Math.sqrt(Math.pow(ansiColor.R-color.R,2)+Math.pow(ansiColor.G-color.G,2)+Math.pow(ansiColor.B-color.B,2));if(distance<smallestDistance){smallestDistance=distance;closestIndex=i}}return closestIndex}ansiEscapeToRgb(ansi){const regex=/\x1b\[(\d+)(;\d+)?(;\d+)*m/;const match=ansi.match(regex);if(match){const codesString=match.slice(1).filter(Boolean).join("");const codes=codesString.split(";").map(Number);if(codes.length===1){const code=codes[0];if(code>=30&&code<=37){return{color:this.ansiToRgb(code-30),isBackground:false}}else if(code>=40&&code<=47){return{color:this.ansiToRgb(code-40),isBackground:true}}}if(codes.length===3&&(codes[0]===38||codes[0]===48)&&codes[1]===5){return{color:this.ansiToRgb(codes[2]),isBackground:codes[0]===48}}throw new Error("Unsupported ANSI escape sequence")}else{throw new Error("Invalid ANSI escape sequence")}}isItBrowser(){return typeof window!=="undefined"&&typeof window.document!=="undefined"}isItNode(){return typeof(typeof process!=="undefined"&&process.versions&&process.versions.node)=="string"}}exports.default=NodeLogger;